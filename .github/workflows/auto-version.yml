name: Auto Version Bump

on:
  # Only trigger on PR merges to main or master
  pull_request:
    types: [closed]
    branches: [main, master]

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Type of version bump to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  auto-version:
    # Only run on merged PRs (not closed without merge)
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    name: Update Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Setup Git User
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Determine Version Type from Commits
        id: version-type
        if: github.event_name != 'workflow_dispatch'
        run: |
          # Default to patch for safety
          TYPE="patch"

          # Look at all commits in the PR
          PR_COMMITS=$(git log origin/${{ github.base_ref }}..${{ github.sha }} --pretty=format:"%s")
          echo "PR Commits:"
          echo "$PR_COMMITS"

          # Check for conventional commit prefixes
          if echo "$PR_COMMITS" | grep -q '^feat\!:' || echo "$PR_COMMITS" | grep -q '^BREAKING CHANGE:'; then
            TYPE="major"
          elif echo "$PR_COMMITS" | grep -q '^feat:'; then
            TYPE="minor"
          elif echo "$PR_COMMITS" | grep -q '^fix:'; then
            TYPE="patch"
          fi

          echo "Determined version bump type: $TYPE"
          echo "type=$TYPE" >> $GITHUB_OUTPUT

      - name: Bump Version
        id: bump-version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(cat package.json | jq -r '.version')
          echo "Current version: $CURRENT_VERSION"

          # Determine version type (from input or commit analysis)
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TYPE="${{ github.event.inputs.version-type }}"
          else
            TYPE="${{ steps.version-type.outputs.type }}"
          fi
          echo "Version bump type: $TYPE"

          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Bump version according to type
          if [ "$TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          # Create new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update package.json
          cat package.json | jq ".version = \"$NEW_VERSION\"" > package.json.new
          mv package.json.new package.json

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Format package.json
        run: |
          # Format the package.json file to ensure it matches project style
          bun prettier --write package.json

          # Verify formatting was corrected
          if ! bun prettier --check package.json; then
            echo "Warning: package.json could not be formatted correctly"
          fi

      - name: Create Branch and Push
        id: create-branch
        run: |
          # Generate a unique ID for the branch
          UNIQUE_ID=$(date +%s)

          # Create a new branch for the version bump
          BRANCH_NAME="release/RELEASE-${UNIQUE_ID}/v${{ steps.bump-version.outputs.version }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Create a new branch from the current HEAD
          git checkout -b $BRANCH_NAME

          # Add and commit the changes
          git add package.json
          git commit -m "chore: bump version to ${{ steps.bump-version.outputs.version }}"

          # Push without force
          git push origin $BRANCH_NAME

      - name: Create Issue for Manual PR Creation
        id: create-issue
        run: |
          # Create issue content
          TITLE="Version Bump: v${{ steps.bump-version.outputs.version }} - Create PR"
          BODY="## Version Bump Ready

          The auto-version workflow has created a new branch with version bump changes.

          ### Details:
          - **New version**: v${{ steps.bump-version.outputs.version }}
          - **Bump type**: ${{ github.event.inputs.version-type || steps.version-type.outputs.type }}
          - **Branch name**: \`${{ steps.create-branch.outputs.branch_name }}\`

          ### Next steps:
          Please create a pull request from this branch to merge these changes into the main branch.

          You can [create the PR here](https://github.com/${{ github.repository }}/compare/${{ github.event.repository.default_branch }}...${{ steps.create-branch.outputs.branch_name }}?quick_pull=1&title=Release%20v${{ steps.bump-version.outputs.version }})

          Suggested PR settings:
          - **Title**: Release v${{ steps.bump-version.outputs.version }}
          - **Body**:
          \`\`\`
          ## Version Release

          This PR was created from the auto-versioning workflow.

          - New version: v${{ steps.bump-version.outputs.version }}
          - Bump type: ${{ github.event.inputs.version-type || steps.version-type.outputs.type }}

          After merging this PR, a new GitHub release will be created automatically.
          \`\`\`

          After merging the PR, the release workflow will automatically create a GitHub release."

          # Create the issue using GitHub CLI
          issue_url=$(gh issue create --title "$TITLE" --body "$BODY")

          # Try to add labels (won't fail if they don't exist)
          gh issue edit "$issue_url" --add-label "automated" || echo "Label 'automated' not found, skipping"
          gh issue edit "$issue_url" --add-label "version-bump" || echo "Label 'version-bump' not found, skipping"

          echo "issue_url=$issue_url" >> $GITHUB_OUTPUT
          echo "Created issue: $issue_url"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
