# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

# Prevent redundant runs of the same code
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Linting and Formatting Checks
  lint:
    name: Lint and Format Check # Name shown in GitHub UI for the status check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      - name: Setup Bun # Use the official Bun setup action
        uses: oven-sh/setup-bun@v1
        # By default, it installs the latest version of Bun
      - name: Install dependencies
        # Use 'bun install --frozen-lockfile' which is similar to 'npm ci'
        # It installs based on bun.lockb and fails if changes are needed.
        run: bun install --frozen-lockfile
      - name: Check formatting and lint code
        # Use 'bun run lint' - assumes your 'lint' script in package.json
        # correctly runs both 'prettier --check' and 'eslint .'
        run: bun run lint

  # Job 2: TypeScript Type Checking
  typecheck:
    name: Type Check # Status check name
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run Svelte Check
        # Use 'bun run check' - assumes 'check' script runs svelte-check
        run: bun run check

  # Job 3: Unit Tests
  unit-test:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run Vitest with Coverage
        # Use 'bun run test' - this should run 'vitest --run' for CI
        run: bun run test -- --coverage --reporter=junit --outputFile=test-report.junit.xml
        #run: bun run test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: synvara/template-svelte5-app
          # Add test results upload
      - name: Upload test results to Codecov
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: test-report.junit.xml

  # Job 4: Build Check
  build-check:
    name: Build Check # Status check name
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run build
        # Use 'bun run build' - assumes 'build' script runs 'vite build'
        run: bun run build
